library(tidyverse)
library(dplyr)
library(stringr)
library(png)
library(MPRAnalyze)
library(BiocParallel)
PATH_TO_STARCODE = "./star_code/"
PATH_TO_STATS = "./"
wd = getwd()
#Select the top N barcodes by DNA
N <<-100
#For checking if the spike-ins are Valid
check_valid_nucleotide <- function(string){
valid_nuc = c("A", "a", "T", "t", "G", "g", "C", "c")
for (i in strsplit(string, "")[[1]]){
if (!(i %in% valid_nuc)){
return(FALSE)
}
}
return(TRUE)
}
#For analyzing the clusters generated by Starcode
#Read in the analyzed starcode data
#Give each cluster a type from addType function
#Type 1 = centroid is in map & no clustered barcodes in map
#Type 1.2 = centroid is in map & all clustered barcodes that are in the map belong to same architecture as the centroid
#Type 2 = centroid not in map & none of the clustered barcodes are in the map
#Type 3 = centroid is in map & one or more clustered barcode is in map (the clustered barcodes map to different architectures)
#Type 4 = centroid not in map & one or more clustered barcode is in map
#We only keep type 1 and 1.2
addType <- function(f, sampleNumber){
f$sample_number = sampleNumber
f$type = "NONE"
f$type[f$centroid_in_map == TRUE & f$clustered_in_map == "NULL"] = "type1"
f$type[f$centroid_in_map == FALSE & f$clustered_in_map == "NULL"] = "type2"
f$type[f$centroid_in_map == TRUE & f$clustered_in_map != "NULL"] = "type3"
f$type[f$centroid_in_map == FALSE & f$clustered_in_map != "NULL"] = "type4"
f$type[f$centroid_in_map == TRUE & f$clustered_in_map != "NULL" & f$architectures_match == T] = "type1.2"
#If it is the spike in, keep as type1
f$type[f$centroid %in% spike_ins] = "type1"
f %>%
mutate(
collapse_stat = 0,
collapse_stat = if_else(total_clustered!=1, centroid_counts/total_clustered, collapse_stat)) -> f
return(f)
}
#For editing
####
mData=read_tsv("19664-test3/metaData.tsv")
library(tidyverse)
library(dplyr)
library(stringr)
library(png)
library(MPRAnalyze)
library(BiocParallel)
PATH_TO_STARCODE = "./star_code/"
PATH_TO_STATS = "./"
wd = getwd()
#Select the top N barcodes by DNA
N <<-100
#For checking if the spike-ins are Valid
check_valid_nucleotide <- function(string){
valid_nuc = c("A", "a", "T", "t", "G", "g", "C", "c")
for (i in strsplit(string, "")[[1]]){
if (!(i %in% valid_nuc)){
return(FALSE)
}
}
return(TRUE)
}
addType <- function(f, sampleNumber){
f$sample_number = sampleNumber
f$type = "NONE"
f$type[f$centroid_in_map == TRUE & f$clustered_in_map == "NULL"] = "type1"
f$type[f$centroid_in_map == FALSE & f$clustered_in_map == "NULL"] = "type2"
f$type[f$centroid_in_map == TRUE & f$clustered_in_map != "NULL"] = "type3"
f$type[f$centroid_in_map == FALSE & f$clustered_in_map != "NULL"] = "type4"
f$type[f$centroid_in_map == TRUE & f$clustered_in_map != "NULL" & f$architectures_match == T] = "type1.2"
#If it is the spike in, keep as type1
f$type[f$centroid %in% spike_ins] = "type1"
f %>%
mutate(
collapse_stat = 0,
collapse_stat = if_else(total_clustered!=1, centroid_counts/total_clustered, collapse_stat)) -> f
return(f)
}
#For editing
####
mData=read_tsv("19664-test3/metaData.tsv")
library(r2d3)
install.packages("r2d3")
library(r2d3)
knitr::include_url("mpra_vis.html")
library(dplyr)
library(tidyverse)
t = read_csv("/Scratch/Sam/projects/teto_dictionary/test.csv")
library(dplyr)
library(tidyverse)
t = read_csv("/Scratch/Sam/projects/teto_dictionary/test.csv")
View(t)
t %>% select(-`...1`)
t %>% select(-`...1`) -> t
t %>% filter(barcode == "TGTGTGTGTGTGCGGGTCGACGGA")
156 + 84
t %>% filter(barcode == "TGTGTGTGTGTGCGGGTCGACGGA") %>% View()
library(dplyr)
library(tidyverse)
t = read_csv("/Scratch/Sam/projects/teto_dictionary/test.csv")
t %>% select(-`...1`) -> t
t %>% filter(barcode == "TGTGTGTGTGTGCGGGTCGACGGA") %>% View()
87+157+8
library(dplyr)
library(tidyverse)
t = read_csv("/Scratch/Sam/projects/teto_dictionary/test.csv")
t %>% select(-`...1`) -> t
t %>% filter(barcode == "TGTGTGTGTGTGCGGGTCGACGGA") %>% View()
library(dplyr)
setwd("/Scratch/Sam/projects/github/JGEnglishLab.github.io/data")
read_csv("current_runs_alpha_data.csv") -> n
library(tidyverse)
read_csv("current_runs_alpha_data.csv") -> n
read_csv("current_runs_alpha_data_o.csv") -> o
View(o)
View(n)
o %>% select(-`...1`) -> o
n %>% select(-`...1`) -> n
o %>% arrange(architecture,motif,controls,rpm,Value) -> o
n %>% arrange(architecture,motif,controls,rpm,Value) -> n
o %>% arrange(architecture,motif,controls,alpha,Value) -> o
